{"name":"Mockservicesserver","tagline":"CSharp Mock Services Server","body":"### Why this project:\r\nI am working on Leasing application for a Multinational Giant. The application Produces / Consumes several  Web services. Most of the data in our application comes in XML format from another web service and will be displayed in the User Interface. Business Users always provides some changes to our Application and this needs to be achieved in shorter Time Periods. In this Scenario we will do Parallel development where Some Team members will work on Web Services changes and Some Team members will work on User Interface Changes. User Interface Cannot be tested until Web Services development/modifications completed. \r\n\r\nIn this situation MockServicesServer Comes to Rescue. \r\n\r\n### Software Requirements:\r\n* To Work With Source Code Visual Studio 2010 is required\r\n* .NET Framework 4.0\r\n\r\n### How It Works:\r\n\r\n1. Start the MockServicesServer. \r\n2. By Default the application start listening at port 3333.(The behaviour can be changed by changing app.config port value)\r\n3. Edit the MockServices.xml  \r\n4. To Serve a Static Content for a given Request URL<br/>\r\n`<Handler Name=\"Scenario1\" Description=\"\" RequestUrl=\"http://staticurl.com\">\r\n <Response HandlerType=\"Static\"  FileName=\"one.xml\" />\r\n </Handler>`\r\n\r\n5. In Some scenarios you may need to modify the response for a request<br/>\r\n`<Handler Name=\"Scenario2\" Description=\"\" RequestUrl=\"www.codeproject.com\">\r\n<Response HandlerType=\"FromAssembly\"  FileName=\"MockServices.Server.Scenario2Test,MockServices.Server.Scenario2Test.CodeProjectBlocker\" />\r\n  </Handler>`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}